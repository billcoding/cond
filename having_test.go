package sgen

import (
	"testing"
)

func TestHaving(t *testing.T) {
	TestEqual(t, Having(AndGroup(Eq("a", 1))), "HAVING ((a = ?))", []interface{}{1})
	TestEqual(t, Having(AndGroup(Eq("a", 1), Eq("b", 100))), "HAVING ((a = ?) AND (b = ?))", []interface{}{1, 100})
	TestEqual(t, Having(AndGroup(Gt("a", 1))), "HAVING ((a > ?))", []interface{}{1})
	TestEqual(t, Having(AndGroup(Gt("a", 1), Gt("b", 100))), "HAVING ((a > ?) AND (b > ?))", []interface{}{1, 100})
	TestEqual(t, Having(AndGroup(GtEq("a", 1))), "HAVING ((a >= ?))", []interface{}{1})
	TestEqual(t, Having(AndGroup(GtEq("a", 1), GtEq("b", 100))), "HAVING ((a >= ?) AND (b >= ?))", []interface{}{1, 100})
	TestEqual(t, Having(AndGroup(Lt("a", 1))), "HAVING ((a < ?))", []interface{}{1})
	TestEqual(t, Having(AndGroup(Lt("a", 1), Lt("b", 100))), "HAVING ((a < ?) AND (b < ?))", []interface{}{1, 100})
	TestEqual(t, Having(AndGroup(LtEq("a", 1))), "HAVING ((a <= ?))", []interface{}{1})
	TestEqual(t, Having(AndGroup(LtEq("a", 1), LtEq("b", 100))), "HAVING ((a <= ?) AND (b <= ?))", []interface{}{1, 100})
	TestEqual(t, Having(AndGroup(Like("a", 1))), "HAVING ((a LIKE CONCAT('%', ?, '%')))", []interface{}{1})
	TestEqual(t, Having(AndGroup(Like("a", 1), Like("b", 100))), "HAVING ((a LIKE CONCAT('%', ?, '%')) AND (b LIKE CONCAT('%', ?, '%')))", []interface{}{1, 100})
	TestEqual(t, Having(AndGroup(LeftLike("a", 1))), "HAVING ((a LIKE CONCAT('%', ?, '')))", []interface{}{1})
	TestEqual(t, Having(AndGroup(LeftLike("a", 1), LeftLike("b", 100))), "HAVING ((a LIKE CONCAT('%', ?, '')) AND (b LIKE CONCAT('%', ?, '')))", []interface{}{1, 100})
	TestEqual(t, Having(AndGroup(RightLike("a", 1))), "HAVING ((a LIKE CONCAT('', ?, '%')))", []interface{}{1})
	TestEqual(t, Having(AndGroup(RightLike("a", 1), RightLike("b", 100))), "HAVING ((a LIKE CONCAT('', ?, '%')) AND (b LIKE CONCAT('', ?, '%')))", []interface{}{1, 100})
	TestEqual(t, Having(AndGroup(In("a", 1, 100))), "HAVING ((a IN (?, ?)))", []interface{}{1, 100})
	TestEqual(t, Having(AndGroup(In("a", 1, 100), In("b", 100, 200))), "HAVING ((a IN (?, ?)) AND (b IN (?, ?)))", []interface{}{1, 100, 100, 200})
	TestEqual(t, Having(AndGroup(Instr("a", 1))), "HAVING ((INSTR(a, ?) > 0))", []interface{}{1})
	TestEqual(t, Having(AndGroup(Instr("a", 1), Instr("b", 100))), "HAVING ((INSTR(a, ?) > 0) AND (INSTR(b, ?) > 0))", []interface{}{1, 100})

	TestEqual(t, Having(OrGroup(Eq("a", 1))), "HAVING ((a = ?))", []interface{}{1})
	TestEqual(t, Having(OrGroup(Eq("a", 1), Eq("b", 100))), "HAVING ((a = ?) OR (b = ?))", []interface{}{1, 100})
	TestEqual(t, Having(OrGroup(Gt("a", 1))), "HAVING ((a > ?))", []interface{}{1})
	TestEqual(t, Having(OrGroup(Gt("a", 1), Gt("b", 100))), "HAVING ((a > ?) OR (b > ?))", []interface{}{1, 100})
	TestEqual(t, Having(OrGroup(GtEq("a", 1))), "HAVING ((a >= ?))", []interface{}{1})
	TestEqual(t, Having(OrGroup(GtEq("a", 1), GtEq("b", 100))), "HAVING ((a >= ?) OR (b >= ?))", []interface{}{1, 100})
	TestEqual(t, Having(OrGroup(Lt("a", 1))), "HAVING ((a < ?))", []interface{}{1})
	TestEqual(t, Having(OrGroup(Lt("a", 1), Lt("b", 100))), "HAVING ((a < ?) OR (b < ?))", []interface{}{1, 100})
	TestEqual(t, Having(OrGroup(LtEq("a", 1))), "HAVING ((a <= ?))", []interface{}{1})
	TestEqual(t, Having(OrGroup(LtEq("a", 1), LtEq("b", 100))), "HAVING ((a <= ?) OR (b <= ?))", []interface{}{1, 100})
	TestEqual(t, Having(OrGroup(Like("a", 1))), "HAVING ((a LIKE CONCAT('%', ?, '%')))", []interface{}{1})
	TestEqual(t, Having(OrGroup(Like("a", 1), Like("b", 100))), "HAVING ((a LIKE CONCAT('%', ?, '%')) OR (b LIKE CONCAT('%', ?, '%')))", []interface{}{1, 100})
	TestEqual(t, Having(OrGroup(LeftLike("a", 1))), "HAVING ((a LIKE CONCAT('%', ?, '')))", []interface{}{1})
	TestEqual(t, Having(OrGroup(LeftLike("a", 1), LeftLike("b", 100))), "HAVING ((a LIKE CONCAT('%', ?, '')) OR (b LIKE CONCAT('%', ?, '')))", []interface{}{1, 100})
	TestEqual(t, Having(OrGroup(RightLike("a", 1))), "HAVING ((a LIKE CONCAT('', ?, '%')))", []interface{}{1})
	TestEqual(t, Having(OrGroup(RightLike("a", 1), RightLike("b", 100))), "HAVING ((a LIKE CONCAT('', ?, '%')) OR (b LIKE CONCAT('', ?, '%')))", []interface{}{1, 100})
	TestEqual(t, Having(OrGroup(In("a", 1, 100))), "HAVING ((a IN (?, ?)))", []interface{}{1, 100})
	TestEqual(t, Having(OrGroup(In("a", 1, 100), In("b", 100, 200))), "HAVING ((a IN (?, ?)) OR (b IN (?, ?)))", []interface{}{1, 100, 100, 200})
	TestEqual(t, Having(OrGroup(Instr("a", 1))), "HAVING ((INSTR(a, ?) > 0))", []interface{}{1})
	TestEqual(t, Having(OrGroup(Instr("a", 1), Instr("b", 100))), "HAVING ((INSTR(a, ?) > 0) OR (INSTR(b, ?) > 0))", []interface{}{1, 100})
}
